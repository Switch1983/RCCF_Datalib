#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RCCFLib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RCCF SQL Server")]
	public partial class LinqObjectsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRecording(Recording instance);
    partial void UpdateRecording(Recording instance);
    partial void DeleteRecording(Recording instance);
    partial void InsertRecordingSet(RecordingSet instance);
    partial void UpdateRecordingSet(RecordingSet instance);
    partial void DeleteRecordingSet(RecordingSet instance);
    #endregion
		
		public LinqObjectsDataContext() : 
				base(global::RCCFLib.Properties.Settings.Default.RCCF_SQL_ServerConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LinqObjectsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqObjectsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqObjectsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqObjectsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Recording> Recordings
		{
			get
			{
				return this.GetTable<Recording>();
			}
		}
		
		public System.Data.Linq.Table<RecordingSet> RecordingSets
		{
			get
			{
				return this.GetTable<RecordingSet>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="FLIGHTDATA.Recording")]
	public partial class Recording : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordingSetId;
		
		private string _Key;
		
		private int _Type;
		
		private string _StringValue;
		
		private System.Nullable<int> _IntValue;
		
		private System.Nullable<double> _FloatValue;
		
		private System.Nullable<System.DateTime> _DateTimeValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordingSetIdChanging(int value);
    partial void OnRecordingSetIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStringValueChanging(string value);
    partial void OnStringValueChanged();
    partial void OnIntValueChanging(System.Nullable<int> value);
    partial void OnIntValueChanged();
    partial void OnFloatValueChanging(System.Nullable<double> value);
    partial void OnFloatValueChanged();
    partial void OnDateTimeValueChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeValueChanged();
    #endregion
		
		public Recording()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordingSetId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecordingSetId
		{
			get
			{
				return this._RecordingSetId;
			}
			set
			{
				if ((this._RecordingSetId != value))
				{
					this.OnRecordingSetIdChanging(value);
					this.SendPropertyChanging();
					this._RecordingSetId = value;
					this.SendPropertyChanged("RecordingSetId");
					this.OnRecordingSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StringValue", DbType="NVarChar(255)")]
		public string StringValue
		{
			get
			{
				return this._StringValue;
			}
			set
			{
				if ((this._StringValue != value))
				{
					this.OnStringValueChanging(value);
					this.SendPropertyChanging();
					this._StringValue = value;
					this.SendPropertyChanged("StringValue");
					this.OnStringValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntValue", DbType="Int")]
		public System.Nullable<int> IntValue
		{
			get
			{
				return this._IntValue;
			}
			set
			{
				if ((this._IntValue != value))
				{
					this.OnIntValueChanging(value);
					this.SendPropertyChanging();
					this._IntValue = value;
					this.SendPropertyChanged("IntValue");
					this.OnIntValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FloatValue", DbType="Float")]
		public System.Nullable<double> FloatValue
		{
			get
			{
				return this._FloatValue;
			}
			set
			{
				if ((this._FloatValue != value))
				{
					this.OnFloatValueChanging(value);
					this.SendPropertyChanging();
					this._FloatValue = value;
					this.SendPropertyChanged("FloatValue");
					this.OnFloatValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeValue", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeValue
		{
			get
			{
				return this._DateTimeValue;
			}
			set
			{
				if ((this._DateTimeValue != value))
				{
					this.OnDateTimeValueChanging(value);
					this.SendPropertyChanging();
					this._DateTimeValue = value;
					this.SendPropertyChanged("DateTimeValue");
					this.OnDateTimeValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="FLIGHTDATA.RecordingSet")]
	public partial class RecordingSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordingSetId;
		
		private System.Guid _RecordingRunId;
		
		private System.DateTime _RecordingSetDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordingSetIdChanging(int value);
    partial void OnRecordingSetIdChanged();
    partial void OnRecordingRunIdChanging(System.Guid value);
    partial void OnRecordingRunIdChanged();
    partial void OnRecordingSetDateTimeChanging(System.DateTime value);
    partial void OnRecordingSetDateTimeChanged();
    #endregion
		
		public RecordingSet()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordingSetId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecordingSetId
		{
			get
			{
				return this._RecordingSetId;
			}
			set
			{
				if ((this._RecordingSetId != value))
				{
					this.OnRecordingSetIdChanging(value);
					this.SendPropertyChanging();
					this._RecordingSetId = value;
					this.SendPropertyChanged("RecordingSetId");
					this.OnRecordingSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordingRunId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RecordingRunId
		{
			get
			{
				return this._RecordingRunId;
			}
			set
			{
				if ((this._RecordingRunId != value))
				{
					this.OnRecordingRunIdChanging(value);
					this.SendPropertyChanging();
					this._RecordingRunId = value;
					this.SendPropertyChanged("RecordingRunId");
					this.OnRecordingRunIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordingSetDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime RecordingSetDateTime
		{
			get
			{
				return this._RecordingSetDateTime;
			}
			set
			{
				if ((this._RecordingSetDateTime != value))
				{
					this.OnRecordingSetDateTimeChanging(value);
					this.SendPropertyChanging();
					this._RecordingSetDateTime = value;
					this.SendPropertyChanged("RecordingSetDateTime");
					this.OnRecordingSetDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
